"""
This file inverts the parsed data generated by executers.
It enables us to use file and line numbers as keys to see what
files cover individual lines and what are the specific covering
situations.
TODO: Parse "titles" - comments on the x/y branches covered.
"""
import os
import json
import glob
import config

def generate_inverted_index(data_dir, output_file):
    inverted_index = dict()
    json_files = glob.glob(os.path.join(data_dir, '*.json'))

    for json_file in json_files:
        print(f"Processing file: {json_file}")
        class_name, method_name = os.path.splitext(os.path.basename(json_file))[0].split('#')

        try:
            with open(json_file, 'r') as f:
                data = json.load(f)
                # # print(data)
                first_key = next(iter(data))
                for filename, line_data in data[first_key].items():
                    print("filename is "+filename)
                    if filename not in inverted_index:
                        inverted_index[filename] = {}

                    for line in line_data.keys():
                        info = line_data[line]
                        if line not in inverted_index[filename]:
                            inverted_index[filename][line] = {"fc": {}, "pc": {}, "nc": {}, "bfc": {}, "bpc": {}, "bnc": {}}
                        
                        for class_type in info.get('class', []):
                            if class_name not in inverted_index[filename][line][class_type]:
                                inverted_index[filename][line][class_type][class_name] = {}
                            inverted_index[filename][line][class_type][class_name][method_name] = info.get('title')

        except Exception as e:
            print(f"Skipping file: {json_file} due to unexpected format. Exception: {str(e)}")


    print("Saving the inverted index...")
    with open(output_file, 'w') as f:
        json.dump(inverted_index, f, indent=2)
    print("Inverted index saved successfully!")



if __name__ == "__main__":
    generate_inverted_index(config.PARSED_DIR, config.INVERT_OUTPUT_PATH)
