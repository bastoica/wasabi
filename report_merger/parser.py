"""
This file parses the HTML reports generated by JaCoCo
and converts them into dictionaries.
"""

from bs4 import BeautifulSoup
import os

def get_coverage_dicts_file(path):
    """
    Function:
        This function parses a single html file
        generated by JaCoCo and returns a dictionary
        of dictionaries.

    Parameters:
        path: Path to the corresponding html file
    
    Returns:
        A dictionary of dictionaries,
            level-0 key: line number ("id" in html)
                         casted to integer
            level-1 key: "class", "title" as in html
            Values: the values of "class" and "title" 
                    as in html
    """
    # Dictionary to store the results
    coverage_dict = {}

    # Load HTML file and create a BeautifulSoup object
    with open(path, 'r') as file:
        soup = BeautifulSoup(file, 'html.parser')
    
    # Find all span elements
    span_elements = soup.find_all('span')

    # Iterate over all span elements
    for span in span_elements:
        # Extract id, class, and title attributes
        line_id_str = span.get('id')
        if line_id_str is not None and len(line_id_str) > 1:  # check that id exists and has at least two characters
            line_id = int(line_id_str[1:])
            line_class = span.get('class') if span.get('class') else None
            line_title = span.get('title')

            # Add a new dictionary to the coverage_dict with the line number as key
            if line_id:
                coverage_dict[line_id] = {"class": line_class, "title": line_title}

    return coverage_dict


def get_coverage_dicts_dir(directory):
    """
    Function:
        This function merges together the outputs
        from 'get_coverage_dicts_file' with an 
        additional two levels of keys.
    
    Parameters:
        directory: Directory under which we have
        all html reports. This should generally be
        something like 'xxxx/target/site/jacoco'
    
    Mechanism:
        For all subdirectories of the directory passed in,
        loop through all .java.html files under each 
        subdirectory and call get_coverage_dicts_file(path)
        for each file, where the parameter path is the path
        to each .java.html file. This should return a
        dictionary of dictionaries for each file.
    
    Output:
        level-0 key: the name of the subdirectory, denoting
                     the position of the file in the original
                     codebase
        level-1 key: everything in front of ".java.html", this
                     should correspond to the original .java 
                     file name
        level-1 value is from the output of get_coverage_dicts_file
    """
    coverage_dicts = {}

    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".java.html"):
                file_path = os.path.join(root, file)
                file_dict = get_coverage_dicts_file(file_path)
                
                subdirectory = os.path.relpath(root, directory)
                file_name = os.path.splitext(file)[0]
                
                if subdirectory not in coverage_dicts:
                    coverage_dicts[subdirectory] = {}
                
                coverage_dicts[subdirectory][file_name] = file_dict
                
    return coverage_dicts

    